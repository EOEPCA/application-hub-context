{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Application-Hub","text":""},{"location":"#read-the-configuration","title":"Read the configuration","text":"<pre><code>config_path=\"/usr/local/etc/jupyterhub/config.yml\"\n</code></pre>"},{"location":"#profile-list","title":"Profile list","text":"<p>This method provides the Application pods spawn options. It is a map with one or more Application pod definitions.</p> <p>A profile is an option shown on the JupyterHub landing page and it defines what container image is used in the pod to spawn.</p> <p>It also includes the CPU and RAM limits to assign to the pod to spawn.</p> <p>The profile slug is the key of the selected profile.</p> <p>Based on the profile slug, the contextualization may include different elements: volumes, config maps or environment variables.</p> <pre><code>from application_hub_context.app_hub_context import DefaultApplicationHubContext\n\nnamespace_prefix = \"jupyter\"\n\ndef custom_options_form(spawner):\n\n    spawner.log.info(\"Configure profile list\")\n\n    namespace = f\"{namespace_prefix}-{spawner.user.name}\"\n\n    workspace = DefaultApplicationHubContext(\n        namespace=namespace,\n        spawner=spawner,\n        config_path=config_path,\n    )\n\n    spawner.profile_list = workspace.get_profile_list()\n\n    return spawner._options_form_default()\n</code></pre>"},{"location":"#pre-spawn-hook","title":"Pre-spawn hook","text":"<p>The <code>pre_spawn_hook</code> is an optional hook function that can be implemented to do bootstrapping work before the spawner starts.</p> <p>This hook contextualises the Application pod to spawn and:</p> <ul> <li>may mount config maps</li> <li>may mount volumes</li> <li>may set pod environment variables</li> </ul> <pre><code>def pre_spawn_hook(spawner):\n\n    spawner.http_timeout = 600\n\n    profile_slug = spawner.user_options.get(\"profile\", None)\n\n    env = os.environ[\"JUPYTERHUB_ENV\"].lower()\n\n    spawner.log.info(f\"Using profile slug {profile_slug}\")\n\n    namespace = f\"{namespace_prefix}-{spawner.user.name}\"\n\n    workspace = DefaultApplicationHubContext(\n        namespace=namespace,\n        spawner=spawner,\n        config_path=config_path\n    )\n\n    workspace.initialise()\n\n    profile_id = workspace.config_parser.get_profile_by_slug(slug=profile_slug).id\n\n    default_url = workspace.config_parser.get_profile_default_url(profile_id=profile_id)\n\n    if default_url:\n        spawner.log.info(f\"Setting default url to {default_url}\")\n        spawner.default_url = default_url\n</code></pre>"},{"location":"#post-stop-hook","title":"Post-stop hook","text":"<p>The <code>post_stop_hook</code> is an optional hook function that can be implemented to do work after the spawner stops.</p> <p>This hook does clean-up tasks:</p> <ul> <li>may delete temporary volumes</li> <li>may delete temporary config maps</li> </ul> <pre><code>def post_stop_hook(spawner):\n\n    namespace = f\"jupyter-{spawner.user.name}\"\n\n    workspace = DefaultApplicationHubContext(\n        namespace=namespace,\n        spawner=spawner,\n        config_path=config_path\n    )\n    spawner.log.info(\"Dispose in post stop hook\")\n    workspace.dispose()\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#profiles","title":"Profiles","text":"<p>A profile entry is defined as an entry in the <code>config.yml</code> file:</p> <pre><code>profiles:\n- id: profile_1\n  ...\n- id: profile_2\n  ...\n</code></pre> <p>A profile is defined with:</p> <pre><code># an identifier\nid: profile_1\n# the group(s) this profile is included in:\ngroups:\n- group-A\n- group-B\n# a definition block, see config c.KubeSpawner.profile_list in the kubespawner documentation\ndefinition:\n    display_name: Profile 1\n    slug: profile_1_slug\n    default: False\n    kubespawner_override:\n        cpu_limit: 4\n        mem_limit: 8G\n        image: eoepca/iat-jupyterlab:main\n# the default URL to redirect (optional)\ndefault_url: \"lab\"\n# spawned pod environment variables (optional)\npod_env_vars:\n    A: 10\n    B: 20\n    GITLAB_TOKEN:\n      from_config_map:\n        name: gitlabenv\n        key: GITLAB_TOKEN\n# a list of volumes (optional)\nvolumes: []\n# a list of config maps (optional)\nconfig_maps: []\n# kubernetes node pool selector\nnode_selector: {}\n</code></pre>"},{"location":"configuration/#understanding-the-groups","title":"Understanding the groups","text":"<p>The <code>groups</code> element allows a granular access to different apps.</p> <p>Users and groups can be managed via UI in the <code>/hub/admin</code> deployment URL or via API (see https://jupyterhub.readthedocs.io/en/stable/reference/rest-api.html#/)</p> <p>With a configuration like:</p> <pre><code>profiles:\n- id: profile_1\n  groups:\n  - group-A\n  - group-B\n  definition:\n  ...\n- id: profile_2\n  groups:\n  - group-B\n  definition:\n  ...\n</code></pre> <p>A user that belongs to <code>group-A</code> is:</p> <ul> <li>able to spawn the application defined in the <code>profile_1</code>.</li> <li>not able to spawn the application defined in the <code>profile_2</code>.</li> </ul> <p>A user belonging to <code>group-B</code> is:</p> <ul> <li>able to spawn the application defined in the <code>profile_1</code>.</li> <li>able to spawn the application defined in the <code>profile_2</code>.</li> </ul>"},{"location":"configuration/#profile-definition","title":"Profile definition","text":"<p>A <code>profile definition</code> example is shown below:</p> <pre><code>definition:\n  display_name: Profile 1\n  slug: profile_1_slug\n  default: False\n  kubespawner_override:\n    cpu_limit: 4\n    mem_limit: 8G\n    image: eoepca/iat-jupyterlab:main\n</code></pre> <p>The <code>kubespawner_override</code> can also include <code>extra_resource_limits</code> and <code>extra_resource_guarantees</code> to provide GPUs:</p> <pre><code>kubespawner_override:\n  cpu_limit: 4\n  mem_limit: 8G\n  image: eoepca/iat-jupyterlab:main\n  extra_resource_limits: {\"nvidia.com/gpu\": \"1\"}\n  extra_resource_guarantees: {\"nvidia.com/gpu\": \"1\"}\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment variables","text":"<p>Environment variables can be defined by</p> <ul> <li>Providing a fixed global value, or</li> <li>Referencing a key in a config map (which must exist in the same Kubernetes namespace,   e.g. an individual user's namespace)</li> </ul> <p>The two ways of defining environment variables work as follows (global and specific):</p> <pre><code>pod_env_vars:\n  global: global_value\n  specific:\n    from_config_map:\n      name: config_map_name\n      key: config_map_key\n</code></pre>"},{"location":"configuration/#volumes","title":"Volumes","text":"<p>A volume is defined with:</p> <pre><code>name: volume-workspace\nclaim_name: claim-workspace\nsize: 10Gi\nstorage_class: \"scw-bssd\"\naccess_modes:\n- \"ReadWriteOnce\"\nvolume_mount:\n  name: volume-workspace\n  mount_path: \"/workspace\"\npersist: true\n</code></pre> <p>Note: if the PVC does not exist it is created.</p> <p>If the <code>persist</code> boolean flag is set to <code>false</code>, both the PVC and Volume are deleted.</p>"},{"location":"configuration/#configmaps","title":"ConfigMaps","text":"<p>An existing configMap to be mounted on the spawned pod is defined with:</p> <pre><code>name: aws-credentials\nkey: aws-credentials\nmount_path: /home/jovyan/.aws/credentials\ndefault_mode: 0660\nreadonly: true\n</code></pre> <p>A new configMap with the content inline to be mounted on the spawned pod is defined with:</p> <pre><code>name: aws-credentials\nkey: aws-credentials\nmount_path: /home/jovyan/.aws/credentials\ndefault_mode: 0660\nreadonly: true\ncontent: -|\n  [default]\n  aws_access_key_id=5...b\n  aws_secret_access_key=c7...3\n</code></pre>"},{"location":"configuration/#roles-and-role-bindings","title":"Roles and role bindings","text":"<p>Roles and role bindings are defined as follows (following the model of the Kubernetes RBAC authorisation):</p> <pre><code>role_bindings:\n  - name: pod_reader_role_binding\n    subjects:\n      - name: default\n        kind: ServiceAccount\n    role:\n        name: pod_reader_role\n        api_group: rbac.authorization.k8s.io\n        verbs:\n          - get\n          - list\n          - watch\n        resources:\n          - pods\n          - pods/log\n    persist: false\n</code></pre> <p>If the <code>persist</code> boolean flag is set to <code>false</code>, both the role and role binding are deleted when the pod is disposed.</p>"},{"location":"configuration/#image-pull-secrets","title":"Image Pull Secrets","text":"<p>Image Pull Secrets are defined with:</p> <pre><code>image_pull_secrets:\n  - data: \"eyJhdXRocyI6eyJjci50ZXJyYWR1ZS5jkdWWWVXTnpiMVZuTm14VmJUWkllWGhUIn19fQ==\"\n    name: \"cr-config\"\n    persist: false\n</code></pre>"},{"location":"configuration/#init-containers","title":"Init Containers","text":"<p>This init container use an <code>.init.sh</code> mounted from a configMap and a volume to contextualize the environment:</p> <pre><code>init_containers:\n  - command:\n    - sh\n    - /opt/init/.init.sh\n    image: bitnami/git:latest\n    name: init-file-on-volume\n    volume_mounts:\n    - mount_path: /workspace\n      name: workspace-volume\n    - mount_path: /opt/init/.init.sh\n      name: init\n      sub_path: init\n</code></pre> <p>The configMap <code>init</code> is created with:</p> <pre><code>- config_maps:\n  - name: init\n    key: init\n    content: |-\n      echo \"# Hello World!\" &gt; /workspace/README.md\n    default_mode: null\n    mount_path: /opt/init/.init.sh\n    persist: false\n    readonly: true\n</code></pre>"},{"location":"jupyterhub-api/","title":"Using JupyterHub API","text":"<p>See JupyterHub documentation for more information on the JupyterHub API.</p> <p>The code examples below show how the JupyterHub REST API can be used with Python and the <code>requests</code> module.</p>"},{"location":"jupyterhub-api/#obtain-an-api-token","title":"Obtain an API token","text":"<p>In order to use the API, an API token must be obtained. This requires the username and password of an admin or other user with the necessary privileges.</p> <pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\n\nheaders = {'Content-Type': 'application/json'}\n\ndata = {\n  \"username\": \"&lt;username&gt;\"\n  \"password\": \"&lt;password&gt;\"\n}\n\nr = requests.get(f\"{endpoint}/authorizations/token\", headers=headers, json=data, verify=False)\n\ntoken = r.json()['token']\n</code></pre>"},{"location":"jupyterhub-api/#groups","title":"Groups","text":""},{"location":"jupyterhub-api/#list-groups","title":"List groups","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\nr = requests.get(f\"{endpoint}/groups\", headers=headers, verify=False)\n\nr.json()\n</code></pre>"},{"location":"jupyterhub-api/#create-group","title":"Create group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\nr = requests.post(f\"{endpoint}/groups/{group}\", headers=headers, verify=False)\nr.status_code\nr.json()\n</code></pre>"},{"location":"jupyterhub-api/#add-user-to-group","title":"Add user to group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\ndata = {\n  \"users\": [\"mrossi\"]\n}\n\nr = requests.post(f\"{endpoint}/groups/{group}/users\", headers=headers, json=data, verify=False)\nr.status_code\n</code></pre>"},{"location":"jupyterhub-api/#remove-user-from-group","title":"Remove user from group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\ndata = {\n  \"users\": [\"mrossi\"]\n}\n\nr = requests.delete(f\"{endpoint}/groups/{group}/users\", headers=headers, json=data, verify=False)\n\nr.json()\n</code></pre>"},{"location":"jupyterhub-api/#named-servers","title":"Named servers","text":""},{"location":"jupyterhub-api/#create-a-named-server","title":"Create a named server","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ndata = {\"profile\": \"profile_1_slug\"}\n\nserver_name = \"labs\"\n\nuser = \"mrossi\"\nr = requests.post(f\"{endpoint}/users/{user}/servers/{server_name}\", headers=headers, json=data, verify=False)\n\nr.status_code, r.text\n</code></pre>"},{"location":"k8s/","title":"Kubernetes configuration","text":"<p>JupyterHub is configured to run the pods in a dedicated workspace.</p> <p>As such, a ClusterRole is needed with the manifest:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jupyter-rbac\nsubjects:\n  - kind: ServiceAccount\n    name: hub\n    namespace: jupyter\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\n</code></pre> <p>Download the manifest from:</p> <p>cluster-role-binding.yaml</p> <p>Apply with:</p> <pre><code>kubectl apply -f cluster-role-binding.yaml\n</code></pre> <p>or do:</p> <pre><code>curl https://eoepca.github.io/application-hub-context/cluster-role-binding.yaml | kubectl apply -f -\n</code></pre>"}]}